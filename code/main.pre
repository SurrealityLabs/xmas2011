
# 1 "C:\projects-hg\christmasornament2011\code\main.c"

# 59 "C:\Program Files\HI-TECH Software\PICC\9.83\include\pic16f505.h"
volatile control unsigned char OPTION @ 0x000;


volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit PA0 @ ((unsigned)&STATUS*8)+5;
volatile bit RBWUF @ ((unsigned)&STATUS*8)+7;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned PA0 : 1;
unsigned : 1;
unsigned RBWUF : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char OSCCAL @ 0x005;

volatile bit CAL0 @ ((unsigned)&OSCCAL*8)+1;
volatile bit CAL1 @ ((unsigned)&OSCCAL*8)+2;
volatile bit CAL2 @ ((unsigned)&OSCCAL*8)+3;
volatile bit CAL3 @ ((unsigned)&OSCCAL*8)+4;
volatile bit CAL4 @ ((unsigned)&OSCCAL*8)+5;
volatile bit CAL5 @ ((unsigned)&OSCCAL*8)+6;
volatile bit CAL6 @ ((unsigned)&OSCCAL*8)+7;

volatile union {
struct {
unsigned : 1;
unsigned CAL : 7;
};
struct {
unsigned : 1;
unsigned CAL0 : 1;
unsigned CAL1 : 1;
unsigned CAL2 : 1;
unsigned CAL3 : 1;
unsigned CAL4 : 1;
unsigned CAL5 : 1;
unsigned CAL6 : 1;
};
} OSCCALbits @ 0x005;



volatile unsigned char PORTB @ 0x006;
volatile control unsigned char TRISB @ 0x006;

volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;

volatile union {
struct {
unsigned RB0 : 1;
unsigned RB1 : 1;
unsigned RB2 : 1;
unsigned RB3 : 1;
unsigned RB4 : 1;
unsigned RB5 : 1;
};
} PORTBbits @ 0x006;



volatile unsigned char PORTC @ 0x007;
volatile control unsigned char TRISC @ 0x007;

volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;

volatile union {
struct {
unsigned RC0 : 1;
unsigned RC1 : 1;
unsigned RC2 : 1;
unsigned RC3 : 1;
unsigned RC4 : 1;
unsigned RC5 : 1;
};
} PORTCbits @ 0x007;


# 27 "C:\Program Files\HI-TECH Software\PICC\9.83\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);


# 153
#pragma inline(_delay)
extern void _delay(unsigned long);

# 4 "C:\Program Files\HI-TECH Software\PICC\9.83\include\stdlib.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 16
extern int errno;

# 27
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 65
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);

# 106
extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);

# 122
extern void abort(void);
extern void exit(int);
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

# 145
extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);
extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

# 5 "C:\projects-hg\christmasornament2011\code\main.c"
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0xFFFC & 0xFFF7 & 0xFFFF & 0xFFFF");

unsigned char currentMode = 0;
unsigned char softwareTimer = 0;
unsigned char displayState = 0;
unsigned char scratchPad = 0;
unsigned char switchState = 0;
unsigned char inhibitModeChange = 1;
int randomNum = 0;

void main(void) {

OPTION = 0b01000111;

TRISC = 0x00;
TRISB = 0x01;
PORTC = 0x00;
PORTB = 0x00;


while(1) {


_delay((unsigned long)((65)*(4000000/4000.0)));
softwareTimer++;



if(switchState == 0) {


if(!(PORTB & 0x01)) {
switchState = 1;
} else {
switchState = 0;
}
} else if(switchState == 1) {

if(!(PORTB & 0x01)) {
switchState = 2;
} else {
switchState = 1;
}
} else if(switchState == 2) {

if(PORTB & 0x01) {
if(inhibitModeChange) {
inhibitModeChange = 0;
} else {
currentMode++;
if(currentMode > 8) currentMode = 0;
displayState = 0;
softwareTimer = 0;
}
switchState = 0;
} else {
switchState = 2;
}
} else {
switchState = 0;
}


switch(currentMode) {
case 0:
if(softwareTimer >= 8) {
PORTB = 0b00110100;
PORTC = 0b00111111;
softwareTimer = 0;
}
break;
case 1:
if(softwareTimer >= 8) {
if(displayState == 0) {
PORTB = 0b00110100;
PORTC = 0b00111111;
displayState = 1;
} else {
PORTB = 0x00;
PORTC = 0x00;
displayState = 0;
}
softwareTimer = 0;
}
break;
case 2:
if(softwareTimer >= 8) {
if(displayState == 0) {
PORTB = 0b00000100;
PORTC = 0b00101110;
displayState = 1;
} else {
PORTB = 0b00110000;
PORTC = 0b00010001;
displayState = 0;
}
softwareTimer = 0;
}
break;
case 3:
if(softwareTimer >= 4) {
if(displayState == 0) {
PORTB = 0b00000000;
PORTC = 0b00010110;
displayState = 1;
} else if(displayState == 1) {
PORTB = 0b00100000;
PORTC = 0b00100001;
displayState = 2;
} else {
PORTB = 0b00010100;
PORTC = 0b00001000;
displayState = 0;
}
softwareTimer = 0;
}
break;
case 4:
if(softwareTimer >= 4) {
if(displayState == 0) {
PORTB = 0b00000100;
PORTC = 0b00010111;
displayState = 1;
} else if(displayState == 1) {
PORTB = 0b00100100;
PORTC = 0b00100011;
displayState = 2;
} else {
PORTB = 0b00010100;
PORTC = 0b00001011;
displayState = 0;
}
softwareTimer = 0;
}
break;
case 5:
if(softwareTimer >= 8) {
if(displayState == 0) {
PORTB = 0b00110100;
PORTC = 0b00111111;
displayState = 1;
} else {
PORTB = 0b00000100;
PORTC = 0b00000011;
displayState = 0;
}
softwareTimer = 0;
}
break;
case 6:
if(softwareTimer >= 2) {
randomNum = rand();
PORTB = (unsigned char) (((randomNum & 0xFF00) >> 8) & 0b00110100);
PORTC = (unsigned char) ((randomNum & 0x00FF) & 0b00111111);
softwareTimer = 0;
}
break;
case 7:
if(softwareTimer >= 2) {
randomNum = rand();
scratchPad = (unsigned char) (((randomNum & 0xFF00) >> 8) & 0b00110100);
scratchPad |= 0b00000100;
PORTB = scratchPad;
scratchPad = (unsigned char) ((randomNum & 0x00FF) & 0b00111111);
scratchPad |= 0b00000011;
PORTC = scratchPad;
softwareTimer = 0;
}
break;
case 8:
PORTB = 0;
PORTC = 0;


# 178
#asm
     SLEEP

# 180
#endasm 
 currentMode = 0;
break;
default:
currentMode = 0;
break;
}

}
}
